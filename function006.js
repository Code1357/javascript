/** 非同期処理 */
// 非同期処理は順番に処理を行うが、非同期処理の完了を待たずに次の処理を実行する
/* 同期処理は上から順番に処理される...
同期処理
↓
同期処理
↓
同期処理
*/

/* 課題：同期処理の場合、下記のような実行処理となる...
同期処理
↓
同期処理（時間が掛かる処理）
↓
同期処理（前の処理が終わるまでストップ）
↓
同期処理（前の処理が終わるまでストップ）
*/

/* 非同期処理であれば....
同期処理
↓
非同期処理 → 結果が返ってきたら処理を続ける
↓ 
同期処理（前の処理を待たなくてもOK）
↓
同期処理
 */

'use strict'

// 同期処理
function fn () {
  console.log('先に処理');
}
const fnResult = function fn2 () {
  console.log('後に処理');
}
fn(fnResult());
console.log('2番目に処理したいけどできない');

// ----------------------------------------------------------

// 非同期処理
function fn3 () {
  console.log('先に処理');
}
const fnResult2 = setTimeout(function fn4 () {
  console.log('後に処理');
},　1000); 
fn3(fnResult2);
console.log('2番目に処理');
